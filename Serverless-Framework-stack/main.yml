service: ${file(./config.js):stack_name}
variablesResolutionMode: 20210326
frameworkVersion: '2'

provider:
  name: aws
  region: ${file(./config.js):region}
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'
  vpc:
    securityGroupIds:
      - !Ref ServerlessSecurityGroup
    subnetIds:
      - Ref: PrivateSubnet
      - Ref: PublicSubnet

package:
  artifact: lambdas.zip

constructs:
  jobs:
    type: queue
    worker:
      handler: lambdas/sqsListner.handler
      # memorySize: 512 
      runtime: nodejs12.x 
      fileSystemConfig:
        localMountPath: /mnt${file(./config.js):mount_dir}
        arn: !GetAtt AccessPoint.Arn

functions:
  SQSWriter:
    handler: lambdas/sqsWriter.handler
    # memorySize: 512 
    runtime: nodejs12.x 
    timeout: 29
    events:
      - httpApi:
          method: post
          path: /write-to-sqs
    environment:
      QUEUE_URL: ${construct:jobs.queueUrl}
  
plugins:
  - serverless-lift


resources:
  Resources:
    Vpc:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
    PrivateSubnet:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: ${file(./config.js):vpc_zones.0}
        CidrBlock: 10.0.1.0/24
        VpcId:
          Ref: Vpc
    PublicSubnet:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: ${file(./config.js):vpc_zones.1}
        CidrBlock: 10.0.21.0/24
        VpcId:
          Ref: Vpc
    Eip:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc
    NatGateway:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId:
          Fn::GetAtt:
            - Eip
            - AllocationId
        SubnetId:
          Ref: PublicSubnet
    PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: Vpc
    PrivateRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: PrivateRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
          Ref: NatGateway
    SubnetRouteTableAssociationPrivate:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: PrivateSubnet
        RouteTableId:
          Ref: PrivateRouteTable

    InternetGateway:
      Type: AWS::EC2::InternetGateway
    VPCGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId:
          Ref: Vpc
        InternetGatewayId:
          Ref: InternetGateway
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: Vpc
    PublicRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId:
          Ref: PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: InternetGateway
    SubnetRouteTableAssociationPublic:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: PublicSubnet
        RouteTableId:
          Ref: PublicRouteTable

    ElasticFileSystem:
      Type: AWS::EFS::FileSystem
      Properties:
        Encrypted: false
        PerformanceMode: generalPurpose
        FileSystemPolicy:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "elasticfilesystem:ClientMount"
                - "elasticfilesystem:ClientWrite"
              Principal:
                AWS: "*"
      UpdateReplacePolicy: Delete
      DeletionPolicy: Delete
    
    AccessPoint:
      Type: AWS::EFS::AccessPoint
      Properties:
        FileSystemId: !Ref ElasticFileSystem
        PosixUser:
          Uid: "1000"
          Gid: "1000"
        RootDirectory:
          CreationInfo:
            OwnerGid: "1000"
            OwnerUid: "1000"
            Permissions: "777"
          Path: ${file(./config.js):mount_dir}
      DependsOn:
        - MountTargetA
        - MountTargetB

    MountTargetA:
      Type: AWS::EFS::MountTarget
      Properties:
        FileSystemId: !Ref ElasticFileSystem
        SecurityGroups:
          - !Ref ServerlessSecurityGroup
        SubnetId: !Ref PrivateSubnet

    MountTargetB:
      Type: AWS::EFS::MountTarget
      Properties:
        FileSystemId: !Ref ElasticFileSystem
        SecurityGroups:
          - !Ref ServerlessSecurityGroup
        SubnetId: !Ref PublicSubnet

        
    ServerlessSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: SecurityGroup for Serverless Functions
          VpcId: !Ref Vpc
          SecurityGroupIngress:
            - IpProtocol:  "-1"
              CidrIp: "0.0.0.0/0"
